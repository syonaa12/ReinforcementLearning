import numpy as np
from algorithms.base_algorithm import BaseMABAlgorithm

class ExploitationOnly(BaseMABAlgorithm):
    """
    Pure exploitation algorithm - always selects arm with highest estimated reward
    """
    def __init__(self, n_arms: int, **kwargs):
        super().__init__(n_arms, **kwargs)
        
    def select_arm(self) -> int:
        """
        Selects the arm with the highest estimated reward.
        
        Returns:
            int: Index of the arm with the highest estimated reward.
            
        Strategy:
        - If no arm has been pulled yet (all pulls are 0), return arm 0.
        - Otherwise, return the arm with the highest estimated reward.
        """
        if np.all(self.pulls == 0):
            return 0  # No prior knowledge, start with arm 0
        return int(np.argmax(self.estimates))  # Greedy selection
